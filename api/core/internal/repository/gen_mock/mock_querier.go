// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/gen_sqlc/querier.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/gen_sqlc/querier.go -package mock -destination=./internal/repository/gen_mock/mock_querier.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/tamaco489/firebase_authentication_sample/api/core/internal/repository/gen_sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, db repository.DBTX, arg repository.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, db, arg)
}

// CreateUserFirebaseAuthentication mocks base method.
func (m *MockQuerier) CreateUserFirebaseAuthentication(ctx context.Context, db repository.DBTX, arg repository.CreateUserFirebaseAuthenticationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFirebaseAuthentication", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFirebaseAuthentication indicates an expected call of CreateUserFirebaseAuthentication.
func (mr *MockQuerierMockRecorder) CreateUserFirebaseAuthentication(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFirebaseAuthentication", reflect.TypeOf((*MockQuerier)(nil).CreateUserFirebaseAuthentication), ctx, db, arg)
}

// GetUIDByFirebaseUID mocks base method.
func (m *MockQuerier) GetUIDByFirebaseUID(ctx context.Context, db repository.DBTX, firebaseUid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUIDByFirebaseUID", ctx, db, firebaseUid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUIDByFirebaseUID indicates an expected call of GetUIDByFirebaseUID.
func (mr *MockQuerierMockRecorder) GetUIDByFirebaseUID(ctx, db, firebaseUid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUIDByFirebaseUID", reflect.TypeOf((*MockQuerier)(nil).GetUIDByFirebaseUID), ctx, db, firebaseUid)
}
